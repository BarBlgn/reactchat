{"version":3,"sources":["features/memberProcess.js","components/Profile.js","config/Config.js","components/MessageInput.js","components/Register.js","components/Login.js","features/counter/counterSlice.js","components/Message.js","components/Messages.js","components/Frame.js","app/store.js","serviceWorker.js","index.js","features/counter/Counter.module.css"],"names":["memberProcess","createSlice","name","initialState","username","color","showregisterform","reducers","setUsername","state","nickname","setShowRegisterForm","action","payload","setColor","selectedcolor","incrementByAmount","incrementColor","actions","memberUsername","member","memberColor","showRegisterForm","Profile","props","useSelector","className","src","alt","icon","All","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","MessageInput","sendMessage","e","preventDefault","refMessages","database","ref","messageList","push","message","date","Date","now","Username","Color","setState","bind","handleMessage","event","this","target","value","class","onSubmit","onChange","type","placeholder","React","Component","Register","useState","setNickname","dispatch","useDispatch","undefined","id","onClick","Login","showregister","drawLoginForm","counterSlice","increment","decrement","Message","messageClass","Sent","Text","Messages","on","snapshot","messages","val","newState","m","scrollToBottom","animateScroll","containerId","createRef","Object","keys","map","Frame","configureStore","reducer","counter","counterReducer","memberReducer","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","store","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports"],"mappings":"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","file":"static/js/main.4edacfd9.chunk.js","sourcesContent":["import { createSlice } from '@reduxjs/toolkit';\n\nexport const memberProcess = createSlice({\n  name: 'member',\n  initialState: {\n    username: \"\",\n    color: \"\",\n    showregisterform: \"\"\n  },\n  reducers: {\n    setUsername: (state) => {\n      // Redux Toolkit allows us to write \"mutating\" logic in reducers. It\n      // doesn't actually mutate the state because it uses the Immer library,\n      // which detects changes to a \"draft state\" and produces a brand new\n      // immutable state based off those changes\n      state.username = state.nickname;\n    },\n    setShowRegisterForm: (state, action) => {\n        state.showregisterform += action.payload;\n    },\n    setColor: (state) => {\n        state.color = state.selectedcolor;\n    },\n    incrementByAmount: (state, action) => {\n        state.username += action.payload;\n    },\n    incrementColor: (state, name) => {\n        state.color += name.payload;\n    }\n  },\n});\n\nexport const { setUsername, setColor, incrementByAmount, incrementColor, setShowRegisterForm } = memberProcess.actions;\n\n// The function below is called a selector and allows us to select a value from\n// the state. Selectors can also be defined inline where they're used instead of\n// in the slice file. For example: `useSelector((state) => state.counter.value)`\nexport const memberUsername = state => state.member.username;\nexport const memberColor = state => state.member.color;\nexport const showRegisterForm = state => state.member.showregisterform;\n\nexport default memberProcess.reducer;\n","import React from 'react';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport * as All from '@fortawesome/free-brands-svg-icons';\nimport { library } from '@fortawesome/fontawesome-svg-core';\nimport { useSelector, useDispatch } from 'react-redux';\nimport {\n    setUsername,\n    incrementByAmount,\n    memberUsername,\n    memberColor\n} from '../features/memberProcess';\n\nconst Profile = (props) => {\n    const username = useSelector(memberUsername);\n    const color = useSelector(memberColor);\n\n    return (\n        <div className={'contact-profile'}>\n\t\t\t<img src={'http://emilcarlsson.se/assets/harveyspecter.png'} alt=\"\" />\n\t\t\t<p>{username}</p>\n\t\t\t<div className={'social-media'}>\n                <FontAwesomeIcon icon={All.faLinkedinIn} />\n                <FontAwesomeIcon icon={All.faFacebookF} />\n                <FontAwesomeIcon icon={All.faTwitter} />\n\t\t\t</div>\n\t\t</div>\n     )\n}\n\nexport default Profile;","import firebase from 'firebase';\nimport { library }  from '@fortawesome/fontawesome-svg-core'\n\nvar firebaseConfig = {\n    apiKey: \"AIzaSyC6zWRnYvgSfWF7AfsqCCaL18YKD4VIOkI\",\n    authDomain: \"reactchat-3a4dc.firebaseapp.com\",\n    databaseURL: \"https://reactchat-3a4dc.firebaseio.com\",\n    projectId: \"reactchat-3a4dc\",\n    storageBucket: \"reactchat-3a4dc.appspot.com\",\n    messagingSenderId: \"71361254830\",\n    appId: \"1:71361254830:web:cc7cf5c53d164db98ae43f\",\n    measurementId: \"G-6Z255M0NRW\"\n  };\n  // Initialize Firebase\n  firebase.initializeApp(firebaseConfig);\n  export default firebase;","import React from 'react';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport * as All from '@fortawesome/free-solid-svg-icons';\nimport { library } from '@fortawesome/fontawesome-svg-core';\nimport firebase from '../config/Config';\nimport { useSelector, useDispatch } from 'react-redux';\nimport {\n    setUsername,\n    incrementByAmount,\n    memberUsername,\n} from '../features/memberProcess';\nimport GetUsername from '../Functions';\n\nclass MessageInput extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            messageList: [],\n            message: \"\",\n            username: this.props.Username,\n            color: this.props.Color\n        };\n\n        this.sendMessage = this.sendMessage.bind(this);\n        this.handleMessage = this.handleMessage.bind(this);\n    }\n\n    handleMessage (event) {\n        this.setState({message: event.target.value});\n    }\n\n    sendMessage = e => {\n        e.preventDefault();\n\n        const refMessages = firebase.database().ref(\"messages\");\n        var messageList = this.state.messageList;\n\n        refMessages.push({\n            message: this.state.message,\n            date: Date.now(),\n            username: this.props.Username,\n            color: this.props.Color\n        });\n\n        this.setState({\"messageList\": messageList, \"message\": \"\"});\n      }\n\n    /*\n    sendMessage (e) {\n        const refMessages = firebase.database().ref(\"messages\");\n        var messageList = this.state.messageList;\n\n        refMessages.push({\n            message: this.state.message,\n            date: Date.now(),\n            username: this.props.Username,\n            color: this.props.Color\n        });\n\n        this.setState({\"messageList\": messageList});\n    }\n    */\n\n    render () {\n        return (\n            <div className={'message-input'}>\n                <div class=\"wrap\">\n                    <form onSubmit={this.sendMessage}>\n                        <input value={this.state.message} onChange={this.handleMessage} type=\"text\" placeholder=\"Write your message...\" />\n                        <button type=\"submit\" className={'submit'}><FontAwesomeIcon icon={All.faPaperPlane} /></button>\n                    </form>\n                </div>\n\t\t    </div>\n        )\n    }\n}\n\nexport default MessageInput;","import React, { useState } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport {\n    setUsername,\n    incrementByAmount,\n    memberUsername,\n} from '../features/memberProcess';\nimport Color from './Color';\n\nexport default function Register(props) {\n    const username = useSelector(memberUsername);\n    const [nickname, setNickname] = useState('');\n    const [selectedcolor, setselectedcolor] = useState('');\n    const dispatch = useDispatch();\n    var drawRegisterForm = (username == \"\" || username == null || username == undefined);\n\n    if (drawRegisterForm) {\n        return (\n            <div id=\"LoginForm\">\n                <h3>Who are you?</h3>\n                <input value={nickname} onChange={e => setNickname(e.target.value)} type=\"text\" placeholder=\"Nickname\" />\n                <input type=\"text\" placeholder=\"Email\" />\n                <input type=\"password\" placeholder=\"Password\" />\n                <button onClick={() => dispatch(incrementByAmount(nickname))}>Login</button>\n            </div>\n        );\n    } else {\n        return (\n            <div>\n            </div>\n        );\n    }\n}","import React, { useState } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport {\n    setUsername,\n    incrementByAmount,\n    setShowRegisterForm,\n    memberUsername,\n    showRegisterForm\n} from '../features/memberProcess';\nimport Register from './Register';\n\nexport default function Login(props) {\n    const username = useSelector(memberUsername);\n    const showregister = useSelector(showRegisterForm);\n\n    const [nickname, setNickname] = useState('');\n    const [selectedcolor, setselectedcolor] = useState('');\n    const dispatch = useDispatch();\n    var drawLoginForm = (username == \"\" || username == null || username == undefined);\n\n    if (showregister == \"true\") {\n        return ( \n            <Register />\n        )\n    }  \n    else {\n        if (drawLoginForm) {\n            return (\n                <div id=\"LoginForm\">\n                    <h3>Who are you?</h3>\n                    <input value={nickname} onChange={e => setNickname(e.target.value)} type=\"text\" placeholder=\"Nickname\" />\n                    <input type=\"password\" placeholder=\"Password\" />\n                    <button onClick={() => dispatch(incrementByAmount(nickname))}>Login</button>\n                    <div class=\"register-message\">If you are not registered yet, you can register by clicking <span class=\"span-link\" onClick={() => dispatch(setShowRegisterForm(\"true\"))}>here</span>!</div>\n                </div>\n            );\n        } else {\n            return (\n                <div>\n                </div>\n            );\n        }\n    }\n}","import { createSlice } from '@reduxjs/toolkit';\r\n\r\nexport const counterSlice = createSlice({\r\n  name: 'counter',\r\n  initialState: {\r\n    value: 0,\r\n  },\r\n  reducers: {\r\n    increment: state => {\r\n      // Redux Toolkit allows us to write \"mutating\" logic in reducers. It\r\n      // doesn't actually mutate the state because it uses the Immer library,\r\n      // which detects changes to a \"draft state\" and produces a brand new\r\n      // immutable state based off those changes\r\n      state.value += 1;\r\n    },\r\n    decrement: state => {\r\n      state.value -= 1;\r\n    },\r\n    incrementByAmount: (state, action) => {\r\n      state.value += action.payload;\r\n    },\r\n  },\r\n});\r\n\r\nexport const { increment, decrement, incrementByAmount } = counterSlice.actions;\r\n\r\n// The function below is called a thunk and allows us to perform async logic. It\r\n// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This\r\n// will call the thunk with the `dispatch` function as the first argument. Async\r\n// code can then be executed and other actions can be dispatched\r\nexport const incrementAsync = amount => dispatch => {\r\n  setTimeout(() => {\r\n    dispatch(incrementByAmount(amount));\r\n  }, 1000);\r\n};\r\n\r\n// The function below is called a selector and allows us to select a value from\r\n// the state. Selectors can also be defined inline where they're used instead of\r\n// in the slice file. For example: `useSelector((state) => state.counter.value)`\r\nexport const selectCount = state => state.counter.value;\r\n\r\nexport default counterSlice.reducer;\r\n","import React from 'react';\n\nclass Message extends React.Component {\n    constructor(props) {\n        super(props);\n    }\n\n    render() {\n        var messageClass = \"sent\";\n\n        if(!this.props.Sent) {\n            messageClass = \"replies\";\n        }\n\n        return (\n            <li className={messageClass}>\n                <img src={'http://emilcarlsson.se/assets/mikeross.png'} alt=\"\" />\n                <p className={this.props.Color}>{this.props.Text}</p>\n            </li>\n        )\n    }\n}\n\nexport default Message;","import React from 'react';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport * as All from '@fortawesome/free-solid-svg-icons';\nimport { library } from '@fortawesome/fontawesome-svg-core';\nimport firebase from '../config/Config';\nimport Message from './Message';\nimport { animateScroll } from \"react-scroll\";\n\nclass Messages extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            messageList: []\n        };\n    }\n\n    componentDidMount() {\n        const messagesRef = firebase.database().ref(\"messages\");\n        messagesRef.on(\"value\", (snapshot) => {\n            let messages = snapshot.val();\n            let newState = [];\n            for (let m in messages) {\n                newState.push({\n                    id: m,\n                    message: messages[m].message,\n                    date: messages[m].date,\n                    username: messages[m].username,\n                    color: messages[m].color\n                });\n            }\n            this.setState({ messageList: newState });\n        });\n\n        this.scrollToBottom();\n    }\n\n    componentDidUpdate() {\n        this.scrollToBottom();\n    }\n\n    scrollToBottom() {\n        animateScroll.scrollToBottom({\n          containerId: \"message-list\"\n        });\n    }\n\n    render () {\n        const newData = React.createRef();\n\n        if(this.props.Username != \"\") {\n            return (\n                <div id=\"message-list\" className={'messages'}>\n                    <ul>\n                        {\n                            Object.keys(this.state.messageList).map((m) => \n                                <Message Color={this.state.messageList[m].color} Sent={this.props.Username != this.state.messageList[m].username} Username={this.state.messageList[m].username} Text={this.state.messageList[m].message} Date={this.state.messageList[m].date} />\n                            )\n                        }\n                    </ul>\n                </div>\n            )\n        }\n        else {\n            return (\n                <div className={'messages'}>\n                </div>\n            )\n        }\n    }\n}\n\nexport default Messages;","import React from 'react';\nimport Profile from './Profile';\nimport MessageInput from './MessageInput';\nimport Login  from './Login';\nimport Register from './Register';\nimport { Counter } from '../features/counter/Counter';\nimport Messages from './Messages';\nimport { useSelector, useDispatch } from 'react-redux';\nimport {\n    setUsername,\n    incrementByAmount,\n    memberUsername,\n    memberColor\n} from '../features/memberProcess';\n\nconst Frame = () => {\n    const username = useSelector(memberUsername);\n    const color = useSelector(memberColor);\n\n    return (\n        <div id=\"frame\">\n            <div className={'content'}>\n                <Profile />\n                <Messages Username={username} />\n                <MessageInput Username={username} Color={color} />\n                <Login />\n                <Register />\n            </div>\n        </div>\n    )\n}\n\nexport default Frame;","import { configureStore } from '@reduxjs/toolkit';\r\nimport counterReducer from '../features/counter/counterSlice';\r\nimport memberReducer from '../features/memberProcess';\r\n\r\nexport default configureStore({\r\n  reducer: {\r\n    counter: counterReducer,\r\n    member: memberReducer\r\n  },\r\n});\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './style.css';\r\nimport Frame from './components/Frame';\r\nimport store from './app/store';\r\nimport { Provider } from 'react-redux';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <Frame />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"row\":\"Counter_row__3I6R-\",\"value\":\"Counter_value__3vN1l\",\"button\":\"Counter_button__THz-Z\",\"textbox\":\"Counter_textbox__2xOQK\",\"asyncButton\":\"Counter_asyncButton__1A7PP Counter_button__THz-Z\"};"],"sourceRoot":""}